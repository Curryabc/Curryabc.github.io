<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>树状数组</title>
      <link href="/2020/06/07/DataStructures/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2020/06/07/DataStructures/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>树状数组或二元索引树（英语：Binary Indexed Tree），又以其发明者命名为Fenwick树。多用于高效计算数列的前缀和， 区间和。它可以以O(logn)的时间得到任意前缀和，并同时支持在O(logn)时间内支持动态单点值的修改。</li><li>BIT是能够完成下述操作的数据结构：<br>  给一个初始值全为0的数列a(1),a(2),…,a(n)<ol><li>给定i,计算a(1)+a(2)+…+a(i)</li><li>给定i和x,执行a(i)+=x</li></ol></li><li>前缀和同样可以使用<a href="https://stacksg.club/2020/06/06/DataStructures/%E7%BA%BF%E6%AE%B5%E6%A0%91/">线段树</a>实现，但是BIT实现起来更方便。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>BIT下标从1开始，下标所对应的二进制如下图所示。</li></ul><p><img src="/images/DataStructures/BIT/BIT_index.png" alt=""></p><h4 id="BIT的更新"><a href="#BIT的更新" class="headerlink" title="BIT的更新"></a>BIT的更新</h4><ul><li>将元素转换为树形结构如下如：</li></ul><p><img src="/images/DataStructures/BIT/BIT_tree.png" alt=""></p><ul><li>使第i项的值增加x需要从i开始，不断把当前位置的值增加x，并把i的二进制最低非0位对应的数字加到i上，直到i的值为节点总数。</li><li>i&amp;(-i)或i&amp;(i-1)能够得到i的最低非0位对应的数字。</li><li>创建树状数组时只要给出初始值为0的数组，然后通过更新操作不断加入每个节点值即可建立树状数组。</li></ul><h4 id="BIT的求和"><a href="#BIT的求和" class="headerlink" title="BIT的求和"></a>BIT的求和</h4><p><img src="/images/DataStructures/BIT/BIT_sum.png" alt=""></p><ul><li>计算前i项的和需要从i开始，不断把当前位置i的值加到结果中，并从中减去的二进制最低非0位<br>对应的数字，直到变成0为止。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIT</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//树状数组</span>    <span class="token keyword">int</span> sums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BIT</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//树状数组下标从1开始</span>        sums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新sums[i]+=delta     * @param i     * @param delta 变化量     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> sums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/" target="_blank" rel="noopener">leetcode 307 区域和检索</a></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumArray</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> BIT bit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NumArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BIT</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bit<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bit<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bit<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> bit<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        NumArray l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">sumRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2020/06/06/DataStructures/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2020/06/06/DataStructures/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="线段树定义"><a href="#线段树定义" class="headerlink" title="线段树定义"></a>线段树定义</h3><ul><li>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。</li><li>线段树是一颗满二叉树（所有叶子的深度都相同，并且每个节点要么是叶子要么有两个孩子）。</li><li>当有n个元素时，对区间的操作可以在O(logn)的时间内完成。</li><li>根据节点中维护数据的不同，线段树可以有不同的功能。</li></ul><p><img src="/images/lanqiao/st/st.png" alt=""></p><h3 id="基于线段树的Range-Minimum-Query-RMQ"><a href="#基于线段树的Range-Minimum-Query-RMQ" class="headerlink" title="基于线段树的Range Minimum Query(RMQ)"></a>基于线段树的Range Minimum Query(RMQ)</h3><ul><li>该线段树在给定数列a0, a1, …, a(n-1)的情况下，可以在O(logn)时间内完成如下操作：<ol><li>给定s和t,求a(s),a(s+1),…,a(t)的最小值</li><li>给定i和x,把a(i)的值改为x</li></ol></li></ul><p><img src="/images/lanqiao/st/rmq.png" alt=""></p><ul><li><p>代码实现：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMQ</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//节点个数</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//线段树</span>      <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> st<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">RMQ</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>          st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//初始化为最大值</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> st<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 把第k(0-index)的值更新为a      * @param k 下标      * @param a 新值      */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//定位到下标为k的元素在线段树中的下标</span>          k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//更新</span>          st<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//向上更新维护线段树</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>              st<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 求[a,b)区间最小值      * @param a      * @param b      * @param k 节点编号      * @param l k所对应的区间左边界      * @param r k所对应的区间右边界      * @return [a,b)区间最小值      */</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//如果[l,r)和[a,b)完全不相交则返回一个不影响结果的值</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> a <span class="token operator">||</span> b <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> INF<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//如果[a,b)完全包含[l,r)则直接返回此最小值</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> b <span class="token operator">>=</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> st<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果未完全包含需要递归查询</span>              <span class="token keyword">int</span> vl <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> vr <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//返回左右子树的最小值</span>              <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>vl<span class="token punctuation">,</span> vr<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//测试</span>          RMQ rmq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RMQ</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          rmq<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>rmq<span class="token punctuation">.</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rmq<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot热部署</title>
      <link href="/2020/05/15/java/Spring-Boot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/05/15/java/Spring-Boot%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ol><li>引入maven依赖</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>热部署<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>devtools<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>scope<span class="token operator">></span>runtime<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span>optional<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>optional<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ol start="2"><li>添加maven插件支持</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>build<span class="token operator">></span>    <span class="token operator">&lt;</span>plugins<span class="token operator">></span>        <span class="token operator">&lt;</span>plugin<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>configuration<span class="token operator">></span>                <span class="token operator">&lt;</span>fork<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>fork<span class="token operator">></span>                <span class="token operator">&lt;</span>addResources<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>addResources<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span></code></pre><ol start="3"><li>在IDEA-&gt;Setting面板中勾选如下几项：</li></ol><p><img src="/images/java/devtools/settings.png" alt=""></p><ol start="4"><li>按快捷键ctrl+shift+alt+/ -&gt; 选择registry选项，在registry面板中勾选如下选项：</li></ol><p><img src="/images/java/devtools/registry.png" alt=""></p><ol start="5"><li>修改完成后重启IDEA，启动项目后修改代码发现项目已经可以自动重启。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-security</title>
      <link href="/2020/05/11/java/spring-security/"/>
      <url>/2020/05/11/java/spring-security/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java/security/auth.png" alt=""></p><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><h4 id="权限控制模型"><a href="#权限控制模型" class="headerlink" title="权限控制模型"></a>权限控制模型</h4><ul><li><a href="https://www.cnblogs.com/iceblow/archive/2019/07/12/11121362.html" target="_blank" rel="noopener">rbac</a></li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Spring Security 是一个框架，提供身份验证、授权和防护，防止常见攻击。凭借对命令式和被动应用程序的第一流支持，它是保护基于 Spring 的应用程序的实际标准。</p><p>Spring Security是基于Spring AOP和Servlet过滤器的安全框架。它提供全面的安全性解决方案，同时在Web请求级和方法调<br>用级处理身份确认和授权。</p><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ol><li>认证(你是谁，用户/设备/系统)</li><li>验证(你能干什么，也叫权限控制/授权，允许执行的操作)</li><li>攻击防护(防止伪造身份)</li></ol><h3 id="原理技术"><a href="#原理技术" class="headerlink" title="原理技术"></a>原理技术</h3><ul><li>Filter</li><li>Servlet</li><li>Spring DI</li><li>Spring AOP</li></ul><h3 id="常用安全框架"><a href="#常用安全框架" class="headerlink" title="常用安全框架"></a>常用安全框架</h3><ul><li>Spring Security</li><li>Apache Shiro</li></ul><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ol><li>认证功能</li><li>授权功能</li><li>加密功能</li><li>会话功能</li><li>缓存功能</li><li>remeberMe功能<br>。。。</li></ol><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>优点：<br>(1) Spring Security基于Spring开发，项目中如果使用Spring作为基础，配合<br>Spring Security做权限更加方便。而Shiro需 要和Spring进行整合。<br>(2) Spring Security功能比Shiro更加丰些，例如安全防护方面。<br>(3) Spring Security社区资源相对比Shiro更加丰富。<br>(4)如果使用的是springboot，springcloud的话， 三者可以无缝集成。<br>缺点:<br>(1) Shiro的配置和使用比较简单，Spring Security.上手复杂些。<br>(2) Shiro依赖性低，不需要任何框架和容器，可以独立运行，而Spring Security<br>依赖Spring容器。</p><h3 id="Hello-World程序"><a href="#Hello-World程序" class="headerlink" title="Hello World程序"></a>Hello World程序</h3><h3 id="基于内存的认证信息"><a href="#基于内存的认证信息" class="headerlink" title="基于内存的认证信息"></a>基于内存的认证信息</h3><h4 id="Bcrypt"><a href="#Bcrypt" class="headerlink" title="Bcrypt"></a>Bcrypt</h4><p>bcrypt是一种跨平台的文件加密工具。bcrypt使用的是布鲁斯:施内尔在1993年发布的Blowfish加密算法。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 基于内存的认证信息 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span>  <span class="token comment" spellcheck="true">//启用spring security</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//会拦截注解了@PreAuthrize注解的配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过重写configure方法，创建用户     * @param auth     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//指定密码加密方式</span>                <span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Bcrypt加密</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="角色授权"><a href="#角色授权" class="headerlink" title="角色授权"></a>角色授权</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyRole('admin')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hello admin"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/normal"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyRole('admin', 'normal')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hello normal"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="基于内存数据库的身份认证和角色授权"><a href="#基于内存数据库的身份认证和角色授权" class="headerlink" title="基于内存数据库的身份认证和角色授权"></a>基于内存数据库的身份认证和角色授权</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>Spring Data Jpa<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>jpa<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>内存数据库<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>hsqldb<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>hsqldb<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h4 id="持久化定义"><a href="#持久化定义" class="headerlink" title="持久化定义"></a>持久化定义</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span> <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Enumerated</span><span class="token punctuation">(</span>EnumType<span class="token punctuation">.</span>STRING<span class="token punctuation">)</span>    <span class="token keyword">private</span> Role role<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> Role<span class="token punctuation">{</span>        admin<span class="token punctuation">,</span> normal    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dao</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfoRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserInfo<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> UserInfo <span class="token function">findUserInfoByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//service</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserInfoRepository repository<span class="token punctuation">;</span>    <span class="token keyword">public</span> UserInfo <span class="token function">findUserInfoByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findUserInfoByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="自定义UserDetailsService"><a href="#自定义UserDetailsService" class="headerlink" title="自定义UserDetailsService"></a>自定义UserDetailsService</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserInfoService userInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PasswordEncoder passwordEncoder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        UserInfo userInfo <span class="token operator">=</span> userInfoService<span class="token punctuation">.</span><span class="token function">findUserInfoByUsername</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_"</span> <span class="token operator">+</span> userInfo<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="制造数据"><a href="#制造数据" class="headerlink" title="制造数据"></a>制造数据</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInit</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserInfoRepository repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserInfo userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>UserInfo<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span>        repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserInfo userInfo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo2<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo2<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>UserInfo<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>normal<span class="token punctuation">)</span><span class="token punctuation">;</span>        repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch入门</title>
      <link href="/2020/04/27/java/ElasticSearch/"/>
      <url>/2020/04/27/java/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Elasticsearch是一个基于Lucene库的搜索引擎。它提供了一个分布式、支持多租户的全文搜索引擎，具有HTTP Web接口和无模式JSON文档。Elasticsearch是用Java开发的，并在Apache许可证下作为开源软件发布。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。根据DB-Engines的排名显示，Elasticsearch是最受欢迎的企业搜索引擎，其次是Apache Solr，也是基于Lucene。– from wikipedia</p><p>学习Elasticsearch之前需要了解一些背景知识。</p><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><p>我们生活中的数据总体分为两种：结构化数据和非结构化数据。</p><ol><li>结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。</li><li>非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件</li></ol><p>而数据存放起来，最重要的就是查询数据。</p><h5 id="结构化数据的查询"><a href="#结构化数据的查询" class="headerlink" title="结构化数据的查询"></a>结构化数据的查询</h5><p>数据库中的数据检索通常都是用强大的sql语句进行查询，能够很快的得到想要的结果。这是因为数据库中的数据都是长度固定，有规律有组织的存放的，因此检索起来非常容易。</p><h5 id="非结构化数据的查询"><a href="#非结构化数据的查询" class="headerlink" title="非结构化数据的查询"></a>非结构化数据的查询</h5><ol><li><p>顺序扫描法：正如字面意思一样，它是采用遍历方式从头到尾扫描查找的，因此效率肯定底下。</p></li><li><p>全文搜索：从文本或数据库中，不限定数据字段，自由地萃取出消息的技术。将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p></li></ol><h5 id="全文搜索的例子"><a href="#全文搜索的例子" class="headerlink" title="全文搜索的例子"></a>全文搜索的例子</h5><p>对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google等搜索引擎、论坛站内搜索、电商网站站内搜索等。</p><h4 id="全文搜索类库"><a href="#全文搜索类库" class="headerlink" title="全文搜索类库"></a>全文搜索类库</h4><h5 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h5><p>Lucene是一套使用java语言实现，用于全文检索和搜索的开放源码类库，由Apache软件基金会支持和提供。Lucene提供了一个简单却强大的应用程序接口，能够做全文索引和搜索，在Java开发环境里Lucene是一个成熟的免费开放源代码工具。</p><ul><li><a href="https://www.cnblogs.com/xiaobai1226/p/7652093.html" target="_blank" rel="noopener">Lucene入门参考</a></li></ul><h4 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h4><ol><li><p>Apache Solr — 基于Lucene实现的高性能搜索服务器，提供JSON/Python/Ruby API</p></li><li><p>Elasticsearch - 就是我们的主角了，前面已经介绍过了，也是基于Lucene实现的。</p></li></ol><h3 id="Elasticsearch入门"><a href="#Elasticsearch入门" class="headerlink" title="Elasticsearch入门"></a>Elasticsearch入门</h3><p>主要梳理一下有关全文搜索的知识，我就不费力写了，直接贴上大神的<a href="https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">入门教程</a>，文中环境是Linux。</p><p>如果操作系统环境是windows在<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch" target="_blank" rel="noopener">官网下载</a>选择相应的windows版本解压。</p><p>看完这篇会有个大体印象，如果要深入学习就看官网<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">权威指南</a>。</p><h4 id="有关curl工具"><a href="#有关curl工具" class="headerlink" title="有关curl工具"></a>有关curl工具</h4><ul><li>针对文中使用curl命令行工具进行测试，在windows PowerShell环境下使用会有如下问题：</li></ul><p><img src="/images/java/es/curl_error.png" alt=""></p><ul><li>原因是错误中提到的Invoke-WebRequest，它是PowerShell提供的原生cURL工具。查看其帮助文档如下：</li></ul><p><img src="/images/java/es/ps_iw.png" alt=""></p><ul><li><p>可以看到在Invoke-WebRequest命令的别名中占用了curl命令，因此使用curl命令默认调用的是原生cURL工具Invoke-WebRequest。而不是我们在环境变量中配置的curl工具。而Invoke-WebRequest和curl在命令语法上有一定区别，所以出现错误。</p></li><li><p>可以修改覆盖PowerShell别名来使用curl工具，但这里最简单的做法就是直接在调用时给出curl程序的名称，调用如下：</p></li></ul><p><img src="/images/java/es/curl_cmd.png" alt=""></p><h4 id="Elasticsearch可视化管理工具"><a href="#Elasticsearch可视化管理工具" class="headerlink" title="Elasticsearch可视化管理工具"></a>Elasticsearch可视化管理工具</h4><p>还有一个Elasticsearch前端可视化管理工具<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a>,能够帮助管理Elasticsearch服务器。</p><h3 id="Elasticsearch集群搭建"><a href="#Elasticsearch集群搭建" class="headerlink" title="Elasticsearch集群搭建"></a>Elasticsearch集群搭建</h3><ul><li><a href="https://juejin.im/post/5bad9520f265da0afe62ed95" target="_blank" rel="noopener">Linux环境搭建集群</a></li></ul><h3 id="Elasticsearch-Java客户端使用"><a href="#Elasticsearch-Java客户端使用" class="headerlink" title="Elasticsearch Java客户端使用"></a>Elasticsearch Java客户端使用</h3><ul><li><p><a href="https://www.jianshu.com/p/56e755415e63" target="_blank" rel="noopener">Spring Data Elasticsearch使用</a></p></li><li><p><a href="https://docs.spring.io/spring-data/elasticsearch/docs/3.2.7.RELEASE/reference/html/#elasticsearch.clients" target="_blank" rel="noopener">官方文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 全文检索 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拥有专属自己的域名邮箱</title>
      <link href="/2020/01/14/createsite/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/"/>
      <url>/2020/01/14/createsite/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为最近申请备案的域名下来了，所以就在思考能把它用在什么地方，正好看到了域名邮箱这个东西。</p></blockquote><h3 id="域名邮箱"><a href="#域名邮箱" class="headerlink" title="域名邮箱"></a>域名邮箱</h3><ul><li><p>只要拥有一个属于自己的域名，比如xxx.com，就可以申请自己的域名邮箱，也就是企业邮箱<a href="mailto:yyy@xxx.com" target="_blank" rel="noopener">yyy@xxx.com</a>。</p></li><li><p>腾讯有<a href="https://exmail.qq.com/onlinesell/intro" target="_blank" rel="noopener">企业邮箱免费版</a>可以免费申请。</p></li></ul><p><img src="/images/createsite/mail/exmail.png" alt=""></p><ul><li>按照要求填写信息：</li></ul><p><img src="/images/createsite/mail/wechatwork.png" alt=""></p><ul><li>根据提示完成后序步骤。之后来到重要的一步，域名设置邮箱解析：</li></ul><p><img src="/images/createsite/mail/resolve.png" alt=""></p><ul><li>在这一步可能会碰到一个问题，如果域名已经设置了CNAME解析，MX解析就会冲突。比如我的：</li></ul><p><img src="/images/createsite/mail/chongtu.png" alt=""></p><p>具体冲突原因参考<a href="https://www.oldking.net/121.html" target="_blank" rel="noopener">这里</a>。</p><p>我已经使用了CNAME解析做CDN加速，而CDN加速阿里云只提供了CNAME解析一种配置方式，为了不影响网站的打开速度，只能让邮箱配置委屈一下，使用二级域名绑定邮箱服务器。</p><p><img src="/images/createsite/mail/mailresolve.png" alt=""></p><ul><li>解析配置成功后，来到了腾讯企业邮箱管理界面：</li></ul><p><img src="/images/createsite/mail/exmailM.png" alt=""></p><ul><li>可以点击添加成员来添加邮箱用户。</li></ul><p><img src="/images/createsite/mail/add.png" alt=""></p><p>到此，域名邮箱配置完成。</p><h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><ul><li>对CNAME,MX等解析不了解含义可以参考阿里云<a href="https://help.aliyun.com/knowledge_detail/29725.html?spm=a2c1d.8251892.0.0.10bc5b766LC8zM&_from=help_widget_detail" target="_blank" rel="noopener">操作指南</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 域名邮箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯企业邮箱 </tag>
            
            <tag> 域名邮箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages+CDN</title>
      <link href="/2020/01/14/createsite/GitHub%20Pages+CDN/"/>
      <url>/2020/01/14/createsite/GitHub%20Pages+CDN/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在之前的文章中提到过给GitHub Pages绑定自己的域名，虽然可以完成个人网站的效果，但是访问速度特别慢。所以我想着用CDN加速提高一下自己网站的访问速度。</p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>CDN加速的前提是域名必须已经备案，所以需要备案域名，可以在阿里云申请<a href="https://beian.aliyun.com/" target="_blank" rel="noopener">备案</a>，一般半个月左右的时间就可以成功。</li></ul><h3 id="开启CDN加速"><a href="#开启CDN加速" class="headerlink" title="开启CDN加速"></a>开启CDN加速</h3><ul><li><p>备案成功后的域名可以使用CDN加速功能，我使用的是阿里云的<a href="https://dcdn.console.aliyun.com/" target="_blank" rel="noopener">全站加速</a>。</p></li><li><p>开通全站加速功能后，在”域名管理”向中添加域名：</p></li></ul><p><img src="/images/createsite/qzjs.png" alt=""></p><ul><li>添加成功后配置回源host:</li></ul><p><img src="/images/createsite/hyhost.png" alt=""></p><ul><li>然后再配置HTTPS,在这里需要开通阿里云的另一个产品<a href="https://common-buy.aliyun.com/?spm=5176.2020520154.cas.1.6b1656a7XUGl4Z&commodityCode=cas#/buy" target="_blank" rel="noopener">SSL证书</a>,这里面有一个免费个人版的证书。</li></ul><p><img src="/images/createsite/ssl.png" alt=""></p><ul><li>开通成功后再回到全站加速控制台，配置https:</li></ul><p><img src="/images/createsite/https.png" alt=""></p><p>至此CDN全站加速功能开通完成，接下来配置域名解析。</p><h3 id="配置CNAME"><a href="#配置CNAME" class="headerlink" title="配置CNAME"></a>配置CNAME</h3><ul><li>全站加速配置成功后会得到一个全站加速域名，需要将这个域名配置到待加速域名的解析列表中。</li></ul><p><img src="/images/createsite/domain.png" alt=""></p><p><img src="/images/createsite/resolve.png" alt=""></p><p>到这里CDN加速就配置完成了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><a href="https://ping.chinaz.com/" target="_blank" rel="noopener">ping检测</a>看看效果如何：</p><p><img src="/images/createsite/ping.png" alt=""></p><ul><li>想知道CDN是否已经生效，可以看ping测试的源ip地址，如果是多个不同的ip,则证明CDN生效了。</li></ul><p><img src="/images/createsite/pingip.png" alt=""></p><h3 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h3><ul><li><p>SSL 参考阿里云<a href="https://help.aliyun.com/document_detail/28535.html?spm=a2c4g.11174283.3.1.713f6fd4aTdibO" target="_blank" rel="noopener">产品介绍</a></p></li><li><p>CDN 参考阿里云<a href="https://help.aliyun.com/document_detail/27101.html?spm=a2c4g.11186623.6.548.4b384868NkHb1Q" target="_blank" rel="noopener">文档</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> GitHub Pages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Pages </tag>
            
            <tag> aliyun </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo激活Gitalk评论板块</title>
      <link href="/2020/01/02/blog/hexo%E5%A2%9E%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%9D%BF%E5%9D%97/"/>
      <url>/2020/01/02/blog/hexo%E5%A2%9E%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%9D%BF%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h3><p>Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p><p>特性</p><ul><li>使用 GitHub 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ul><p>了解Gitalk：<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p><h3 id="创建-blog-comments-仓库"><a href="#创建-blog-comments-仓库" class="headerlink" title="创建 blog-comments 仓库"></a>创建 blog-comments 仓库</h3><p>这个仓库主要用于存储评论，因为 Gitalk 是基于 lssue 和 Preact 开发的评论插件，因此最好每篇文章对应一个 Issue。</p><p><img src="/images/hexo/newrep.png" alt=""></p><h3 id="使用-GitHub-OAuth-第三方验证登录"><a href="#使用-GitHub-OAuth-第三方验证登录" class="headerlink" title="使用 GitHub OAuth 第三方验证登录"></a>使用 GitHub OAuth 第三方验证登录</h3><ol><li>打开 Setting &gt; Developer setting &gt; OAuth applications</li><li>点击 Register a new application</li><li>填入基本的app信息</li><li>创建成功</li></ol><p><img src="/images/hexo/OAuthApp.png" alt=""></p><ol start="5"><li>如果找不到，可以戳这个链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></li><li>创建完成会生成Client ID 和 Client Secret，这两个id需要到填写到配置文件里。<br><img src="/images/hexo/id.png" alt=""></li></ol><h3 id="配置主题-config-yml"><a href="#配置主题-config-yml" class="headerlink" title="配置主题_config.yml"></a>配置主题_config.yml</h3><pre class=" language-yml"><code class="language-yml">gitalk:   enable: true #用来做启用判断可以不用  clientID: 'your clientID' #OAuth Application  clientSecret: 'your clientSecret' #OAuth Application  repo: blog-comments #刚创建用于gitalk Issue的仓库名称  owner: stackSg  #github用户名  admin: stackSg  #github用户名  distractionFreeMode: true # 类似于Facebook的阴影效果  labels: ['Gitalk']  # 用于生成Issue的标签  id:  # 页面唯一标示  language: 'zh-CN' #设置语言</code></pre><p>这里的labels和id对应仓库的Issues如下：<br><img src="/images/hexo/issues.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019总结</title>
      <link href="/2020/01/01/other/2019%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/01/other/2019%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="2019总结"><a href="#2019总结" class="headerlink" title="2019总结"></a>2019总结</h3><p>今天是2020年第一天，想了想应该对自己的2019做个总结，以便为新的一年确立正确的方向和努力目标。</p><p>2019第一件事就是3月份的专升本文化课考试，1-2月那时候恰好还在公司实习，所以都是在下班之余复习，加上自己的文化课水平真的稀碎，对考试很担心，所以这段时间还是比较压抑的，好在最后的结果对得起这份付出，考上了想考的学校。</p><p>2019第二件事是6月份的技能大赛，其实这件事也可以归到专升本里面，因为参加这比赛的最初原因就是为了专升本考试能够加分，虽然分数在市赛就已经加上了，但是总不能半路放弃，所以就跟着准备国赛了。因为要备赛以及参加专升本考试的缘故，所以在3月初早早辞了工作回了学校，考完试之后的两个月都在实验室里准备比赛，确实是比较枯燥乏味的，并且比赛本身也不是自己感兴趣的方向，就更加觉得没意思了。不过最后的结果也还好，如愿拿到了国赛二等。还有就是这个比赛的含金量不足，如果要说从中收获了什么的话，好像技术上并没有什么，更多的是应对比赛，自己抗压能力的提高。无论如何，感谢每一份经历，让之后的自己能够更加从容。</p><p>2019年没有第三件大事。</p><hr><p>剩下的都是一些比较琐碎的事。</p><p>8月回家参加了发小的婚礼，小学初中一起玩耍的伙伴步入了婚姻，多少有些感叹，祝福他之余也在审度自己，同样的年纪是否有足够的成熟。</p><p>9月份开学来到了新学校，不得不说真正的学校生涯已经结束了(似乎高考失败的那一刻就已经结束了)，在这里更多要思考的是如何面对工作，面对社会。</p><p>10月建立了自己的博客，也就是这个网站。</p><p>。。。</p><hr><p>面对2020，新的一年，也做一些展望：</p><p>第一个就是3月份的蓝桥杯</p><p>第二个是5月份的软考</p><p>第三个是四级</p><p>第四个是 女朋友。。。 </p><p>第五是希望自己能够更懂生活。</p><p>新的一年，希望自己更加努力，弥补错误，追赶内心的自己。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不可征服</title>
      <link href="/2019/12/31/other/%E4%B8%8D%E5%8F%AF%E5%BE%81%E6%9C%8D/"/>
      <url>/2019/12/31/other/%E4%B8%8D%E5%8F%AF%E5%BE%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="《不可征服》"><a href="#《不可征服》" class="headerlink" title="《不可征服》"></a>《不可征服》</h3><p>透过覆盖我的夜色，我看见黑暗层层叠叠。<br>感谢上帝赐予我，不可征服的灵魂。<br>就算被地狱紧紧拽住，我也从未退避哀求，<br>遭受命运的重重打击，我满头鲜血，却头颅昂起。<br>在愤怒和悲伤的尘世外，耸立的不只是恐怖的影子，<br>但面对未来的威胁，你会发现，我无所畏惧。<br>无论命运之门多么狭窄，也无论承受怎样的惩罚。<br>我，是我命运的主宰，<br>我，是我灵魂的统帅！</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA2019.3破解</title>
      <link href="/2019/11/17/java/IDEA2019-3%E7%A0%B4%E8%A7%A3/"/>
      <url>/2019/11/17/java/IDEA2019-3%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>1.下载软件包及补丁</p><p>链接：<a href="https://pan.baidu.com/s/1tmmjdZXp6TSSEJCWjYOiuA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tmmjdZXp6TSSEJCWjYOiuA</a> 提取码：627q </p><p>将补丁放到IDEA的bin目录,默认在:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\bin，注意：路径写自己的真实路径</p><p>2.修改IDEA的bin目录中的配置文件</p><p>修改</p><p>idea.exe.vmoptions</p><p>idea64.exe.vmoptions</p><p>打开两个文件在末尾都添加添加一行代码，注意：路径写自己的真实路径</p><p>-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2019.1\bin\ide.jar</p><p>3.打开IDEA,在code中输入如下</p><pre><code>56ZS5PQ1RF-eyJsaWNlbnNlSWQiOiI1NlpTNVBRMVJGIiwibGljZW5zZWVOYW1lIjoi5q2j54mI5o6I5p2DIC4iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiRm9yIGVkdWNhdGlvbmFsIHVzZSBvbmx5IiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJHTyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IkRNIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiQ0wiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiUEMiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJSTSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IldTIiwicGFpZFVwVG8iOiIyMDIwLTAzLTEwIn0seyJjb2RlIjoiREIiLCJwYWlkVXBUbyI6IjIwMjAtMDMtMTAifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9LHsiY29kZSI6IlJTVSIsInBhaWRVcFRvIjoiMjAyMC0wMy0xMCJ9XSwiaGFzaCI6IjEyMjkxNDk4LzAiLCJncmFjZVBlcmlvZERheXMiOjAsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-SYSsDcgL1WJmHnsiGaHUWbaZLPIe2oI3QiIneDtaIbh/SZOqu63G7RGudSjf3ssPb1zxroMti/bK9II1ugHz/nTjw31Uah7D0HqeaCO7Zc0q9BeHysiWmBZ+8bABs5vr25GgIa5pO7CJhL7RitXQbWpAajrMBAeZ2En3wCgNwT6D6hNmiMlhXsWgwkw2OKnyHZ2dl8yEL+oV5SW14t7bdjYGKQrYjSd4+2zc4FnaX88yLnGNO9B3U6G+BuM37pxS5MjHrkHqMTK8W3I66mIj6IB6dYXD5nvKKO1OZREBAr6LV0BqRYSbuJKFhZ8nd6YDG20GvW6leimv0rHVBFmA0w==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==</code></pre><p>点击OK,完成激活</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2019/11/16/DataStructures/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/11/16/DataStructures/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>刚开始计算机都是处理数值数据，后来引入字符串的概念，计算机可以处理非数值的数据了，当然原理是使用数值模拟非数值数据（通过字符编码表，例如ASCII）。</li><li>字符串也称为串。</li><li>子串和主串。”ABC”是”ABCDEF”的子串，反之则倒过来。</li><li>字符串比较。比较对应位置ASSCII码值的大小。比如”abc”和”acc”中’b’&lt;’c’则字符串”abc”&lt;”acc”。</li><li>字符串一般都是比较是否相等。</li><li>子串定位操作称为串的模式匹配。</li></ul><h3 id="字符串匹配算法"><a href="#字符串匹配算法" class="headerlink" title="字符串匹配算法"></a>字符串匹配算法</h3><p><img src="/images/DataStructures/kmp.png" alt=""></p><h4 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h4><ul><li><p>BF算法，即暴风(Brute Force)算法，是普通的模式匹配算法。BF算法的思想就是将目标串S的第一个字符与模式串T的第一个字符进行匹配，若相等，则继续比较S的第二个字符和 T的第二个字符；若不相等，则比较S的第二个字符和T的第一个字符，依次比较下去，直到得出最后的匹配结果。BF算法是一种蛮力算法。</p></li><li><p>代码示例</p><pre class=" language-c"><code class="language-c">  <span class="token comment" spellcheck="true">/**      str:目标串      t:模式串      pos:指定目标串的起始下标       return:若匹配成功则返回相应开始位置（从1开始），失败返回0   **/</span>  <span class="token keyword">int</span> <span class="token function">BF</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> pos <span class="token operator">&amp;&amp;</span> pos <span class="token operator">&lt;=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          i <span class="token operator">=</span> pos<span class="token punctuation">;</span>          j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组第一个位置存放字符串长度 </span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//匹配失败则回退 </span>              i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                  j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> i <span class="token operator">-</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>该算法最坏情况下要进行M<em>(N-M+1)次比较，时间复杂度为O(M</em>N)。</p></li></ul><h4 id="Rabin-Karp"><a href="#Rabin-Karp" class="headerlink" title="Rabin Karp"></a>Rabin Karp</h4><ul><li><p>使用哈希函数算出子串的hash值，然后在目标串中寻找匹配的hash值即能找到匹配的子串。</p></li><li><p>hash，复杂度O(M*N):</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">static</span> <span class="token keyword">long</span> seed <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">hash</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          hash <span class="token operator">=</span> hash <span class="token operator">*</span> seed <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RabinKarp</span><span class="token punctuation">(</span>String p<span class="token punctuation">,</span> String s<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> hash<span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"match_index:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>优化(滚动hash,复杂度O(N)):</p><pre class=" language-java"><code class="language-java">  <span class="token operator">/</span>优化：滚动hash  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RabinKarp2</span><span class="token punctuation">(</span>String p<span class="token punctuation">,</span> String s<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> pHash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">==</span> pHash<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"match_index:"</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">long</span> t <span class="token operator">=</span> hash<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//新的hash=加入新字符后的hash-头一个字符的hash</span>          t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">*</span> seed <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> pHash<span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"match_index:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><ul><li><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。</p></li><li><p>代码示例</p><pre class=" language-c"><code class="language-c">  <span class="token comment" spellcheck="true">/**      t:模式串      next:部分匹配表   **/</span>  <span class="token comment" spellcheck="true">//根据模式串建立部分匹配表 </span>  <span class="token keyword">void</span> <span class="token function">GetNext</span><span class="token punctuation">(</span><span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//i指后缀 </span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//j指前缀</span>      next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//next[0]对应t[0]位置的字符串长度，不需要填值，next[1]前面没有值，默认为0 </span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> j <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>              next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**      str:目标串      t:模式串      next:部分匹配表      pos:指定目标串起始匹配地址   **/</span>   <span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> pos <span class="token operator">&amp;&amp;</span> pos <span class="token operator">&lt;=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          i <span class="token operator">=</span> pos<span class="token punctuation">;</span>          j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//str[0]和t[0]第一个位置存放字符串长度 </span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> j <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//匹配失败则回退 ,KMP是对BF的改进，在此处不需要回退到起始位置比较，而是通过 </span>              j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//事先建立好的部分匹配表(next数组)将j回退到指定位置，提高效率 </span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> i <span class="token operator">-</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>后来有人发现，KMP算法是有缺陷的。比如主串”aaaaabcd”,子串”aaaaae”,得到的next数组为”012345”。往前回溯时会依次回退一个元素，但前面的a元素全都相等，则可以直接回退到第一个a元素。</p></li><li><p>改进代码</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">GetNext</span><span class="token punctuation">(</span><span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//i指后缀 </span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//j指前缀</span>      next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//next[0]对应t[0]位置的字符串长度，不需要填值，next[1]前面没有值，默认为0 </span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> j <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">++</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断如果前缀后缀相等，则next[i]直接指向前缀所指向的 </span>                  next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                  next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://blog.csdn.net/paincupid/article/details/81159320" target="_blank" rel="noopener">https://blog.csdn.net/paincupid/article/details/81159320</a></li><li>阮一峰：<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 串 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/2019/11/13/DataStructures/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
      <url>/2019/11/13/DataStructures/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="矩阵的压缩存储分类"><a href="#矩阵的压缩存储分类" class="headerlink" title="矩阵的压缩存储分类"></a>矩阵的压缩存储分类</h3><p><img src="/images/DataStructures/fl.png" alt=""></p><ul><li>特殊矩阵：若值相同的元素再矩阵钟的分布有一定规律，则称此类矩阵为特殊矩阵。</li><li>稀疏矩阵：若矩阵中有很大一部分为零元素，则称此类矩阵为稀疏矩阵。</li></ul><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><ul><li>存储矩阵的一般方法是采用二维数组，其优点是可以随机地访问每一个元素，因而能够较容易地实现矩阵的各种运算。但对于稀疏矩阵而言，若用二维数组来表示，会重复存储了很多个0了，浪费空间，而且要花费时间来进行零元素的无效计算。所以必须考虑对稀疏矩阵进行压缩存储。</li></ul><h4 id="三元组法"><a href="#三元组法" class="headerlink" title="三元组法"></a>三元组法</h4><ul><li><p>将非零元素所在的行、列以及它的值构成一个三元组（i，j，v），然后再按某种规律存储这些三元组<br><img src="/images/DataStructures/sa.png" alt=""></p></li><li><p>代码示例</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**  * 稀疏数组  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ROW <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COL <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//创建原始数组</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">;</span>          chessArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          chessArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          chessArr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//得到稀疏数组行数</span>          <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>col <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      sum<span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//创建稀疏数组</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ROW<span class="token punctuation">;</span>          sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> COL<span class="token punctuation">;</span>          sparseArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COL<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      sparseArr<span class="token punctuation">[</span><span class="token operator">++</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                      sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                      sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//打印稀疏数组</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> sparseArr<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//将压缩后的稀疏数组写入硬盘</span>          FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"f:/arr.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>          oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>sparseArr<span class="token punctuation">)</span><span class="token punctuation">;</span>          oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//从硬盘读取稀疏数组</span>          FileInputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"f:/arr.data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//根据稀疏数组还原原始数组</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              chessArr2<span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还原原始数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr2<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">:</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/93065d025526" target="_blank" rel="noopener">https://www.jianshu.com/p/93065d025526</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 稀疏数组 </tag>
            
            <tag> 三元组法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归和分治思想</title>
      <link href="/2019/11/10/algorithm/%E9%80%92%E5%BD%92%E5%92%8C%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/"/>
      <url>/2019/11/10/algorithm/%E9%80%92%E5%BD%92%E5%92%8C%E5%88%86%E6%B2%BB%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一种直接或间接调用自身的函数称为递归函数，使用递归可以解决每次面临同一问题，由较简单到最简单的情况，需要注意的是递归的边界条件，也就是终止条件。</p><h4 id="思考步骤"><a href="#思考步骤" class="headerlink" title="思考步骤"></a>思考步骤</h4><ol><li>找重复–子问题（在总问题中划一刀，切出子问题）</li><li>找变化：变化的量作为参数（递归写不出来的时候思考是否缺了变化参数）</li><li>找边界：出口<br>重复中的变化，变化中的重复<br>分解为：直接量+小规模子问题<br>分解为：多个小规模子问题<br>递归树：先纵后横</li></ol><h4 id="递归算法的时间复杂度分析"><a href="#递归算法的时间复杂度分析" class="headerlink" title="递归算法的时间复杂度分析"></a>递归算法的时间复杂度分析</h4><p><img src="/images/algorithm/dg.png" alt=""></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol><li><p>斐波那契数列</p><p> <img src="/images/algorithm/fib.png" alt=""></p><ul><li><p>指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）</p></li><li><p>迭代方式代码实现</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义初始值 </span>  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%d\t"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印数列第0，1项 </span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印数列前40项 </span>  <span class="token punctuation">{</span>      c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//后一项数值等于前两项之和 </span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>      a <span class="token operator">=</span> b<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//用a变量存储第n-2项 </span>      b <span class="token operator">=</span> c<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//用b变量存储第n-1项 </span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>递归方式代码实现</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//递归的终止条件为第数列的前两项 </span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// F(n)=F(n-1)+F(n-2)</span><span class="token punctuation">}</span></code></pre></li><li><p>时间复杂度：T(n) = 2T(n - 1) + O(1) –&gt; O(2^n)</p></li></ul></li><li><p>逆序打印输入的字符串</p><ul><li><p>若输入”abc”则打印出”cba”，以’#’作为结束字符。</p></li><li><p>递归实现</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> c<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果输入字符不是结束标识则继续输入 </span>  <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//当输入结束标识后递归返回到此处打印输入的字符 </span>  <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>最大公约数</p><ul><li>递推公式：f(m,n)=f(n,m%n)</li><li>递归实现：<pre class=" language-c"><code class="language-c">  <span class="token keyword">int</span> <span class="token function">gcc</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> m<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">gcc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li>时间复杂度：O(2logn)</li></ul></li><li><p>插入排序</p><ul><li>对k-1个元素进行插入排序，将第k个元素插入k-1个有序元素中</li><li>递归实现<pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//对k-1个元素排序</span>  <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把第k个元素插入到前面k-1个有序序列中</span>  <span class="token keyword">int</span> index <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>      index<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><h3 id="分治思想"><a href="#分治思想" class="headerlink" title="分治思想"></a>分治思想</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><ul><li><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p></li><li><p>迭代方式</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> high <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始值low和high指向数组头和尾 </span>  <span class="token keyword">int</span> mid<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存储中间位置的下标 </span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算出折半的位置 </span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果中间值大于指定值则查找空间锁定到low-(mid-1)</span>      <span class="token punctuation">{</span>          high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果中间值小于指定值则查找空间锁定到(mid+1)-high </span>      <span class="token punctuation">{</span>          low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//如果查找到指定值则返回下标 </span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span> mid<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>递归方式</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//递归终止条件为未找到或找到返回 </span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算折半下标 </span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><p><img src="/images/algorithm/Hanoi.jfif" alt=""></p><ul><li><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p></li><li><p>递归实现<br><img src="/images/algorithm/hnt1.png" alt=""></p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>  <span class="token comment" spellcheck="true">/**  *    n:汉诺塔的层数  *    x,y,z:三根柱子   *    在这里指定从x移动到z   **/</span>  <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//递归终止条件为只有一个盘子x--->z </span>      <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c--->%c\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>          <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先将第n个盘子上面的n-1个盘子x--->y </span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c--->%c\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将第n个盘子x--->z </span>          <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将y上的n-1个盘子y--->z </span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入汉诺塔的层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> </code></pre></li></ul><h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><p><img src="/images/algorithm/eq.jfif" alt=""></p><ul><li><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。 高斯认为有76种方案。1854年在柏林的象棋杂志上不同的作者发表了40种不同的解，后来有人用图论的方法解出92种结果。计算机发明后，有多种计算机语言可以解决此问题。</p></li><li><p>递归实现</p><pre class=" language-c"><code class="language-c">  <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>  <span class="token comment" spellcheck="true">/**      row:行坐标      n:列坐标      chess:棋盘   **/</span>   <span class="token keyword">int</span> <span class="token function">IsSafe</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断列方向是否安全 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//判断左上方</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> row<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//判断右下方 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> row<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//判断左下方</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> row<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//判断右上方</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> row<span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录总共有多少种解法 </span>  <span class="token comment" spellcheck="true">/*      row : 当前行坐标      n   : 当前列数      chess:  棋盘   */</span>  <span class="token keyword">void</span> <span class="token function">EightQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> chess2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              chess2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> chess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d种解法:\n"</span><span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> chess2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsSafe</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> i<span class="token punctuation">,</span> chess2<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span>                      chess2<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  chess2<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token function">EightQueens</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> chess2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> chess<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">EightQueens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> chess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2019/11/07/computernetwork/ComputerNetWork/"/>
      <url>/2019/11/07/computernetwork/ComputerNetWork/</url>
      
        <content type="html"><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>计算机网络主要指的就是TCP/IP协议栈，是互联网的基石。</li><li>容易忘是因为TCP/IP技术栈有一大部分都隐藏于操作系统的内核态，较少被接触。</li><li>重点脉络：（1，反复记忆。2，多问为什么）</li></ul><ol><li>TCP/IP协议体系的认知<ol><li>分层。一部分处于用户态，一部分处于内核态。数据链路层，网络层，传输层封装于操作系统内核态。应用层存在于操作系统的用户空间，包括DNS，FTP，HTTPs，HTTP，工作中接触较多的是应用层的部分。但其它层的原理必须理解，面试考察。</li><li>层与层之间下层对上层是透明的，传输在每一层是对等的。</li></ol></li><li>数据链路层。<ol><li>以太网帧的格式。</li><li>MTU（最大传输单元）的概念。</li><li>ARP协议和RARP协议（地址协议和逆地址协议，网卡MAC地址和IP地址互查机制）（网络层和链路层的中间层）ARP报文格式，查询原理，缓存机制</li></ol></li><li>网络层<ol><li>掌握IP首部格式：如16位分片标识、DF不分片标志、MF更多分片标志、13位片偏移、8位生存时间TTL、16位的首部检验和等等。</li><li>掌握如何IP分片：如总长大于MTU值，画分片情况；如何避免IP分片（在应用层或传输层做限制）；确定分片顺序；确定分片是否全部到达。</li><li>掌握IP选路。会看路由表。Route print 。路由表每个字段的含义</li><li>掌握ICMP（因特网控制报文协议）：（理解为网络层和传输层的中间协议）报文格式；2种查询报文+5种差错报文。</li></ol></li><li>传输层<ol><li>掌握UDP协议：无连接，不可靠的特点；首部各个字段</li><li>掌握TCP协议（面试集中考察）：面向连接，可靠；首部各字段（序号，确认号，首部长度，窗口大小，校验和等特别的，完成可靠功能的部分）；TCP连接控制机制（三次握手，四次挥手，同时打开，同时关闭，半关闭）；TCP流量控制机制（滑动窗口、慢启动、拥塞避免、快速重传、快速恢复的算法原理）；TCP超时重传机制（四个定时器）；一些问题（为什么三次握手四次挥手？为什么TCP和UDP都存在尾包头？）</li></ol></li><li>应用层<ol><li>掌握DNS（域名解析）协议：名字空间；DNS指针查询（反向查找或逆向解析）基本原理、DNS缓存</li><li>FTP协议（活化石）：控制连接和数据连接（为什么需要这两种连接）；两种工作模式（PASV+PORT）；各种FTP指令和响应码；FTP断点续传，匿名FTP</li><li>HTTP协议：报文格式（请求报文、响应报文、请求头各种字段、响应头各种字段）；HTTP状态码。</li><li>HTTPS协议：详细握手过程；各种算法（摘要算法、数字签名、数字证书的原理与过程）</li></ol></li></ol><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li>链接：<a href="https://pan.baidu.com/s/14bVaPu1b03aJoT4lFL41Lw" target="_blank" rel="noopener">https://pan.baidu.com/s/14bVaPu1b03aJoT4lFL41Lw</a><br>提取码：wfbs </li></ul><h3 id="转自"><a href="#转自" class="headerlink" title="转自"></a>转自</h3><ul><li><a href="https://www.bilibili.com/video/av54705489" target="_blank" rel="noopener">https://www.bilibili.com/video/av54705489</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2019/11/06/algorithm/HashTable/"/>
      <url>/2019/11/06/algorithm/HashTable/</url>
      
        <content type="html"><![CDATA[<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>顺序表查找：挨个比较</li><li>有序表查找：二分法查找</li><li>散列表查找</li></ul><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><ul><li>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。<br><img src="/images/algorithm/hash.png" alt=""></li></ul><h3 id="散列表的两个关键点"><a href="#散列表的两个关键点" class="headerlink" title="散列表的两个关键点"></a>散列表的两个关键点</h3><ul><li>散列函数的构造方法</li><li>处理散列冲突的方法</li></ul><h3 id="散列函数的构造"><a href="#散列函数的构造" class="headerlink" title="散列函数的构造"></a>散列函数的构造</h3><ul><li>构造散列函数的两个基本原则：<ul><li>计算简单</li><li>分布均匀</li></ul></li><li>根据不同情况采用不同的散列函数：<ul><li>计算散列地址所需要的时间</li><li>关键字的长度</li><li>散列表的大小</li><li>关键字的分布情况</li><li>记录查找的频率</li></ul></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> HASHSIZE 12        </span><span class="token comment" spellcheck="true">//定义散列表空间大小 </span><span class="token macro property">#<span class="token directive keyword">define</span> NULLKEY -32768    </span><span class="token comment" spellcheck="true">//散列表元素初始值 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>elem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//散列表空间基址 </span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//散列表总长度 </span><span class="token punctuation">}</span> HashTable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//散列表初始化 </span><span class="token keyword">int</span> <span class="token function">InitHashTable</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>hash<span class="token punctuation">)</span><span class="token punctuation">{</span>    hash<span class="token operator">-></span>elem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> HASHSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token operator">-></span>elem<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//申请空间失败，返回错误代码 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> HASHSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> NULLKEY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     hash<span class="token operator">-></span>count <span class="token operator">=</span> HASHSIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//除留余数法 </span><span class="token keyword">int</span> <span class="token function">Hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> <span class="token punctuation">(</span>HASHSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//余数大小一般&lt;=散列表长度且为质数 </span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//散列表插入 </span><span class="token keyword">int</span> <span class="token function">InsertHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>hash<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> NULLKEY<span class="token punctuation">)</span>            <span class="token punctuation">{</span>        addr <span class="token operator">=</span> <span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HASHSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//冲突解决使用线性探测法 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 偏移地址重新回到起始地址证明散列表已满 </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//散列表查找 </span><span class="token keyword">int</span> <span class="token function">SearchHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>hash<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hash<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果偏移地址定位的元素不等于key值则采用线性探测法继续查找 </span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>addr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HASHSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token operator">-></span>elem<span class="token punctuation">[</span><span class="token operator">*</span>addr<span class="token punctuation">]</span> <span class="token operator">==</span> NULLKEY <span class="token operator">||</span> <span class="token operator">*</span>addr <span class="token operator">==</span> <span class="token function">Hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//查找到初始值的情况或回到首次hash的位置都为查找失败的情况 </span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">PrintHash</span><span class="token punctuation">(</span>HashTable <span class="token operator">*</span>hash<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> hash<span class="token operator">-></span>count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> NULLKEY<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HashTable[%d] = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HashTable[%d] = NULL\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    HashTable <span class="token operator">*</span>hash <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">InitHashTable</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> keys<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">InsertHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"散列表已满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">PrintHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">SearchHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"散列表中不存在key值:%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查找到的key=%d\n"</span><span class="token punctuation">,</span> hash<span class="token operator">-></span>elem<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/7495fad83877" target="_blank" rel="noopener">https://www.jianshu.com/p/7495fad83877</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绑定域名到GitHub Pages</title>
      <link href="/2019/11/04/createsite/dnsmapping/"/>
      <url>/2019/11/04/createsite/dnsmapping/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于GitHub Pages搭建的网站域名格式为xxx.github.io，如果不喜欢这个域名可以去阿里云申请注册一个自己喜欢的域名，然后将购买的域名映射到xxx.github.io。</p></blockquote><ol><li>在自己GitHub Pages仓库的根目录下新建”CNAME”文件，文件内容为自己申请的域名，注意CNAME文件没有后缀。</li></ol><p><img src="/images/createsite/cname.png" alt=""></p><blockquote><p>Github读取CNAME文件之后，Github服务器会设置stacksg.club为主域名，然后将stacksg.github.io重定向到stacksg.club。</p></blockquote><ol start="2"><li><p>登陆阿里云设置域名解析</p><ol><li><p>打开命令行ping自己GitHub Pages主页的域名，得到IP地址。<br><img src="/images/createsite/ip.png" alt=""></p></li><li><p>在阿里云域名解析设置控制台中配置域名解析，注意记录类型选择A，记录值为上一步ping到的IP地址。</p><p><img src="/images/createsite/dns.png" alt=""></p></li><li><p>等待数分钟后自己的域名就可以被访问了。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> GitHub Pages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2019/11/04/algorithm/sort/"/>
      <url>/2019/11/04/algorithm/sort/</url>
      
        <content type="html"><![CDATA[<h3 id="常见排序算法的分类"><a href="#常见排序算法的分类" class="headerlink" title="常见排序算法的分类"></a>常见排序算法的分类</h3><p><img src="/images/sort/fenlei.png" alt=""></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>稳定排序：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。</li></ul><h3 id="衡量排序算法优劣的性能指标"><a href="#衡量排序算法优劣的性能指标" class="headerlink" title="衡量排序算法优劣的性能指标"></a>衡量排序算法优劣的性能指标</h3><ul><li>时间复杂度</li><li>空间复杂度</li><li>稳定性</li></ul><p>有关时间复杂度和空间复杂度的概念参考这篇文章：<a href="https://blog.csdn.net/jsjwk/article/details/84315770" target="_blank" rel="noopener">https://blog.csdn.net/jsjwk/article/details/84315770</a></p><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><ul><li><p>冒泡排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> t<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  t <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>快速排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>      <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>      <span class="token keyword">int</span> key <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> key<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              j<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>      <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">QuickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>鸡尾酒排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">CocktailSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> t<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>                          <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          right<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span> j <span class="token operator">></span> left<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  t <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          left<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li><p>简单选择排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">SelectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> t<span class="token punctuation">;</span>      <span class="token keyword">int</span> minind<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          minind <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>minind<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  minind <span class="token operator">=</span> j<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>minind <span class="token operator">!=</span> i<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              t <span class="token operator">=</span> a<span class="token punctuation">[</span>minind<span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>minind<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>堆排序</p><p>  待更新—</p></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li><p>直接插入排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> t<span class="token punctuation">;</span>      <span class="token keyword">int</span> min<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              j<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p>希尔排序</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">ShellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> k<span class="token punctuation">,</span> t<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              t <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              k <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> t<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  a<span class="token punctuation">[</span>k <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                  k <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              a<span class="token punctuation">[</span>k <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>待更新—</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">MaxArray</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxloop <span class="token operator">=</span> <span class="token function">NumLoop</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxloop<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">MaxArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> maxind <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>maxind<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            maxind <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>maxind<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">NumLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> row_index<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        row_index <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>row_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                b<span class="token punctuation">[</span>row_index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="鸽巢排序"><a href="#鸽巢排序" class="headerlink" title="鸽巢排序"></a>鸽巢排序</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Pigeonholesort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//在此用循环是考虑到相等值的情况</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2019/10/30/java/microservice/"/>
      <url>/2019/10/30/java/microservice/</url>
      
        <content type="html"><![CDATA[<h3 id="互联网架构衍变"><a href="#互联网架构衍变" class="headerlink" title="互联网架构衍变"></a>互联网架构衍变</h3><ol><li>单体架构</li><li>服务器集群 Nginx</li><li>负载均衡服务器集群 Lvs+Keepalived</li><li>CDN+Vanish服务器集群</li><li>数据库读写分离</li><li>NOSQL+分布式搜索引擎</li><li>NOSQL+分库分表+Mycat</li><li>分布式文件系统 MogileFS FastDFS</li><li>应用服务化拆分+消息中间件</li><li>微服务架构</li></ol><h3 id="单体架构（Monolithic）"><a href="#单体架构（Monolithic）" class="headerlink" title="单体架构（Monolithic）"></a>单体架构（Monolithic）</h3><p>软件设计中的三层设计模型（表示层、业务逻辑处理层、数据访问层）：</p><ul><li>表示层：通常理解为用于和用户交互的视图层；</li><li>业务逻辑处理层：用户提交请求，经过业务逻辑层处理后，对用户请求作出响应；</li><li>数据库访问层：主要用于操作数据库。</li></ul><p>尽管在软件设计过程中，架构师或者程序设计者遵守了流行一时的经典的三层模型，但由于并未按照业务场景进行划分，使得最终的系统应用将所有的业务场景的表示层、业务逻辑处理层、数据访问层放在一个 Project 中，然后经过编译、打包并部署到一台服务器上。</p><p>这种架构适用于用户业务不复杂、访问量较小的时候，甚至可以将应用服务、数据库、文件服务器部署在一台服务器上。但随着用户业务场景变得越来越复杂，单体架构的局限性就很快暴露出来了，主要体现在如下几方面：</p><ul><li>随着用户访问量增加，单体应用的并发能力有限；</li><li>随着业务越来越复杂，单体应用代码量急剧膨胀，最终导致代码可 读性、可维护行和可扩展性得不到保证；</li><li>随着系统代码量的剧增，当修改应用程序或者新增需求时，测试难度成指数级增长；</li><li>部署效率低下；</li><li>技术选型单一。</li></ul><h3 id="SOA-架构（Service-Oriented-Architecture）"><a href="#SOA-架构（Service-Oriented-Architecture）" class="headerlink" title="SOA 架构（Service Oriented Architecture）"></a>SOA 架构（Service Oriented Architecture）</h3><p>SOA 是一种粗粒度、松耦合服务架构，服务之间通过简单、精确定义接口进行通讯，不涉及底层编程接口和通讯模型。SOA 可以看作是 B/S 模型、XML（标准通用标记语言的子集）/Web Service 技术之后的自然延伸。</p><p>其主要优点有：</p><ul><li><p>把模块（即服务）拆分，使用接口通信，降低模块之间的耦合度；</p></li><li><p>把项目拆分成若干个子项目，不同的团队负责不同的子项目；</p></li><li><p>增加功能时只需要再增加一个子项目，调用其它系统的接口就可以；</p></li><li><p>可以灵活的进行分布式部署。<br>主要缺点：</p></li><li><p>和单体架构相比，增加了系统复杂度，系统整体性能有较大影响;</p></li><li><p>多服务数据通信协议之间转换过程复杂，容易造成 ESB（Enterprise Service Bus）性能瓶颈。</p></li></ul><h3 id="微服务架构（MicroServices）"><a href="#微服务架构（MicroServices）" class="headerlink" title="微服务架构（MicroServices）"></a>微服务架构（MicroServices）</h3><p>微服务的概念是 Martin Flower 在2014年写的一篇论文《MicroServices》中提出来的，其主要特点是：</p><ul><li>每个服务按照业务划分；</li><li>服务之间通过轻量级 API 调用；</li><li>可以使用不同语言开发；</li><li>可以使用不同的数据存储技术；</li><li>可独立部署，服务之间互相不影响；</li><li>可针对用户访问流量大的服务单独扩展，从而能够节约资源；</li><li>管理自动化。</li></ul><p>主要挑战：</p><ul><li>微服务粒度大小难以划分，需要设计人员对业务有很好的掌握；</li><li>分布式复杂性，主要体现在分布式事务、网络延迟、系统容错等问题解决难度较大；</li><li>微服务之间通信成本较高，对微服务之间网络稳定性、通信速度要求较高；</li><li>由于微服务数量较大，运维人员运维、部署有较大的挑战。</li></ul><h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><ul><li>业界大牛马丁.福勒（Martin Fowler） 这样描述微服务:<blockquote><p>就目前而言，对于微服务业界并没有一个统一的、标准的定义。但通常而言， 微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p></blockquote></li></ul><h3 id="微服务和微服务架构"><a href="#微服务和微服务架构" class="headerlink" title="微服务和微服务架构"></a>微服务和微服务架构</h3><ul><li>微服务：强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用。</li><li>微服务架构：是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其独⽴的进程中，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外，应当尽量避免统⼀的、集中式的服务管理机制，对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。</li></ul><h3 id="微服务架构技术"><a href="#微服务架构技术" class="headerlink" title="微服务架构技术"></a>微服务架构技术</h3><p>服务开发</p><p>服务配置与管理</p><p>服务注册与发现</p><p>服务调用</p><p>服务熔断器</p><p>负载均衡</p><p>服务接口调用(客户端调用服务的简化工具)</p><p>消息队列</p><p>服务配置中心管理</p><p>服务路由（API网关）</p><p>服务监控</p><p>全链路追踪</p><p>服务部署</p><p>数据流操作开发包</p><p>事件消息总线</p><h3 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h3><blockquote><p>协调任何事情：简化分布式系统<br>构建分布式系统并不需要复杂且容易出错。Spring Cloud为最常见的分布式系统模式提供了一种简单易用的编程模型，可帮助开发人员构建弹性，可靠且协调的应用程序。Spring Cloud建立在Spring Boot的基础上，使开发人员可以轻松上手并快速提高生产力。</p></blockquote><p><img src="/images/microservice/1.png" alt=""></p><p>Spring Cloud是微服务架构的一站式解决方案，是微服务架构技术的集合体。</p><h3 id="Sping-Boot和Sping-cloud的关系"><a href="#Sping-Boot和Sping-cloud的关系" class="headerlink" title="Sping Boot和Sping cloud的关系"></a>Sping Boot和Sping cloud的关系</h3><p>SpringBoot专注于快速方便的开发单个个体微服务。</p><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，</p><p>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p><p>SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系.</p><p>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p><h3 id="Spring-Cloud所包含项目"><a href="#Spring-Cloud所包含项目" class="headerlink" title="Spring Cloud所包含项目"></a>Spring Cloud所包含项目</h3><ul><li><p>Spring Cloud Config</p><p>  由git存储库支持的集中式外部配置管理。配置资源直接映射到Spring，Environment但如果需要，可以由非Spring应用程序使用。</p></li><li><p>Spring Cloud Netflix</p><p>  集成各种Netflix的OSS部件(Eureka, Hystrix, Zuul, Archaius, 等)。</p></li><li><p>Spring Cloud Bus</p><p>  事件总线，用于将服务和服务实例与分布式消息传递链接在一起。有用的跨集群传播状态的改变（如改变配置的事件）。</p></li><li><p>Spring Cloud Cloudfoundry</p><p>  将您的应用程序与Pivotal Cloud Foundry集成。提供服务发现实现，还可以轻松实现受SSO和OAuth2保护的资源。</p></li><li><p>Spring Cloud Open Service Broker</p><p>  为构建实现Open Service Broker API的服务代理提供起点。</p></li><li><p>Spring Cloud Cluster</p><p>  领导者选举和常见状态模式，以及Zookeeper，Redis，Hazelcast和Consul的抽象和实现。</p></li><li><p>Spring Cloud Consul</p><p>  使用Hashicorp Consul进行服务发现和配置管理。</p></li><li><p>Spring Cloud Security</p><p>  为Zuul代理中的负载平衡的OAuth2其余客户端和身份验证标头中继提供支持。</p></li><li><p>Spring Cloud Sleuth</p><p>  Spring Cloud应用程序的分布式跟踪，与Zipkin，HTrace和基于日志的（例如ELK）跟踪兼容。</p></li><li><p>Spring Cloud Data Flow</p><p>  面向现代运行时可组合微服务应用程序的云原生编排服务。易于使用的DSL，拖放式GUI和REST-API共同简化了基于微服务的数据管道的总体编排。</p></li><li><p>Spring Cloud Stream</p><p>  轻量级的事件驱动型微服务框架，用于快速构建可以连接到外部系统的应用程序。在Spring Boot应用程序之间使用Apache Kafka或RabbitMQ发送和接收消息的简单声明性模型。</p></li><li><p>Spring Cloud Stream App Starters</p><p>  Spring Cloud Stream App Starters是基于Spring Boot的Spring Integration应用程序，可与外部系统集成。</p></li><li><p>Spring Cloud Task</p><p>  一个短暂的微服务框架，可快速构建执行有限数量数据处理的应用程序。用于向Spring Boot应用程序添加功能和非功能功能的简单声明。</p></li><li><p>Spring Cloud Task应用入门</p><p>  Spring Cloud Task App Starters是Spring Boot应用程序，可以是任何进程，包括不会永远运行的Spring Batch作业，它们在有限的数据处理周期后结束/停止。</p></li><li><p>Spring Cloud Zookeeper</p><p>  使用Apache Zookeeper进行服务发现和配置管理。</p></li><li><p>Spring Cloud AWS</p><p>  与托管的Amazon Web Services轻松集成。它提供了一种方便的方式，可以使用众所周知的Spring习语和API（例如消息传递或缓存API）与AWS提供的服务进行交互。开发人员可以围绕托管服务构建应用程序，而无需关心基础结构或维护。</p></li><li><p>Spring Cloud连接器</p><p>  使各种平台上的PaaS应用程序轻松连接到后端服务，例如数据库和消息代理（该项目以前称为“ Spring Cloud”）。</p></li><li><p>Spring Cloud Starters</p><p>  Spring Boot风格的启动程序项目可简化Spring Cloud使用者的依赖关系管理。（作为一个项目停产，并在Angel.SR2之后与其他项目合并。）</p></li><li><p>Spring Cloud CLI</p><p>  Spring Boot CLI插件，用于在Groovy中快速创建Spring Cloud组件应用程序</p></li><li><p>Spring Cloud Contract</p><p>  Spring Cloud Contract是一个总括项目解决方案，可帮助用户成功实施“消费者驱动合同”方法。</p></li><li><p>Spring Cloud Gateway</p><p>  Spring Cloud Gateway是基于Project Reactor的智能可编程路由器。</p></li><li><p>Spring Cloud OpenFeign</p><p>  Spring Cloud OpenFeign通过自动配置并绑定到Spring Environment和其他Spring编程模型惯用法为Spring Boot应用程序提供集成。</p></li><li><p>Spring Cloud Pipelines</p><p>  Spring Cloud Pipelines提供了一个可靠的部署管道，其中包含一些步骤，以确保您的应用程序可以零停机时间进行部署，并且可以轻松回滚某些错误。</p></li><li><p>Spring Cloud Function</p><p>  Spring Cloud Function通过功能促进业务逻辑的实现。它支持跨无服务器提供程序的统一编程模型，并支持独立运行（本地或在PaaS中）的功能。</p></li></ul><h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><ul><li>功能：服务的自动注册、发现、状态监控。</li></ul><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>导入依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>配置：</p><pre class=" language-java"><code class="language-java">eureka<span class="token operator">:</span>  instance<span class="token operator">:</span>    hostname<span class="token operator">:</span> localhost #eureka服务端的实例名称  client<span class="token operator">:</span>    register<span class="token operator">-</span>with<span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">false</span> #<span class="token boolean">false</span>表示不向注册中心注册自己。    fetch<span class="token operator">-</span>registry<span class="token operator">:</span> <span class="token boolean">false</span> #<span class="token boolean">false</span>表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务    service<span class="token operator">-</span>url<span class="token operator">:</span>      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>$<span class="token punctuation">{</span>eureka<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>hostname<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>server<span class="token punctuation">.</span>port<span class="token punctuation">}</span><span class="token operator">/</span>eureka<span class="token operator">/</span>              #设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</code></pre><p>注解配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment" spellcheck="true">//开启eureka server</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>配置：</p><pre class=" language-java"><code class="language-java">eureka<span class="token operator">:</span>  client<span class="token operator">:</span>    service<span class="token operator">-</span>url<span class="token operator">:</span>      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8761</span><span class="token operator">/</span>eureka<span class="token operator">/</span> #指定服务器地址  instance<span class="token operator">:</span>    prefer<span class="token operator">-</span>ip<span class="token operator">-</span>address<span class="token operator">:</span> <span class="token boolean">false</span> #是否以IP地址注册到服务中心    instance<span class="token operator">-</span>id<span class="token operator">:</span> $<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ip<span class="token operator">-</span>address<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>server<span class="token punctuation">.</span>port<span class="token punctuation">}</span> #动态获取实例id</code></pre><p>注解配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span> <span class="token comment" spellcheck="true">//spring cloud提供 能够提供更好的兼容</span><span class="token comment" spellcheck="true">//@EnableEurekaClient //Netflix提供</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Eureka集群搭建"><a href="#Eureka集群搭建" class="headerlink" title="Eureka集群搭建"></a>Eureka集群搭建</h4><pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8761</span>eureka<span class="token operator">:</span>  instance<span class="token operator">:</span>    hostname<span class="token operator">:</span> localhost #eureka服务端的实例名称  client<span class="token operator">:</span>    service<span class="token operator">-</span>url<span class="token operator">:</span>      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8762</span><span class="token operator">/</span>eureka<span class="token operator">/</span><span class="token punctuation">,</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8763</span><span class="token operator">/</span>eureka<span class="token operator">/</span> #指向其他的注册中心  eureka<span class="token operator">-</span>service<span class="token operator">-</span>url<span class="token operator">-</span>poll<span class="token operator">-</span>interval<span class="token operator">-</span>seconds<span class="token operator">:</span> <span class="token number">30</span>spring<span class="token operator">:</span>  application<span class="token operator">:</span>    name<span class="token operator">:</span> eureka<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">01</span></code></pre><h3 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h3><p><code>Feign是一个声明式Web Service客户端。使用Feign能让编写Web Service客户端更加简单, 它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS标准的注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。</code></p><h4 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h4><ul><li>在父工程中加入如下依赖管理</li></ul><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>RC1<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h4 id="Feign调用实现"><a href="#Feign调用实现" class="headerlink" title="Feign调用实现"></a>Feign调用实现</h4><ul><li>在启动类中标注@EnableFeignClients注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"product-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderRemote</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/product/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Product <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口和product-service中接口保持一致</span><span class="token punctuation">}</span></code></pre><h4 id="调用远程服务"><a href="#调用远程服务" class="headerlink" title="调用远程服务"></a>调用远程服务</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    OrderRemote orderRemote<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/buy/{id}"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> Product <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRemote<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Feign默认采用轮询方式访问</li></ul><h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><ul><li><a href="http://www.ityouknow.com/springcloud/2017/05/16/springcloud-hystrix.html" target="_blank" rel="noopener">参考</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/javacoder_juejue/article/details/81192747" target="_blank" rel="noopener">https://blog.csdn.net/javacoder_juejue/article/details/81192747</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Sping Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL忘记密码怎么办？</title>
      <link href="/2019/10/25/mysql/index/"/>
      <url>/2019/10/25/mysql/index/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>mysql: [Warning] Using a password on the command line interface can be insecure.</code><br><br><code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code></p></blockquote><ul><li>以上信息提示拒绝用户访问数据库，出现这种问题的本质原因是用户密码输入错误！</li></ul><ul><li><p>解决方法：</p><ol><li><p>修改my.ini文件</p><ul><li><p>my.ini文件是MySQL服务实例配置文件，一般在默认路径下。<br><img src="/images/mysql/mypath.png" alt=""></p></li><li><p>如果在这里找不到my.ini文件，一般是文件被隐藏了，打开文件夹的查看菜单，勾选中”显示隐藏的项目”。<br><img src="/images/mysql/xianshi.png" alt=""></p></li><li><p>找到文件后用记事本打开，找到 [mysqld] 项，在下面添加语句：<code>skip-grant-tables</code>  (skip-grant-tables作为启动参数的作用：MYSQL服务器不加载权限判断，任何用户都能访问数据库。)<br><img src="/images/mysql/conf.png" alt=""></p></li><li><p>修改文件保存后，重启mysql服务。</p><pre class=" language-cmd"><code class="language-cmd">>net stop mysql57  //停止mysql服务>net start mysql57  //启动mysql服务//57为mysql版本号，可根据自己mysql版本自行修改</code></pre><p><img src="/images/mysql/restart.png" alt=""></p></li></ul></li><li><p>通过cmd登陆mysql,输入mysql -uroot -p遇到输入密码直接回车，如果显示拒绝访问把cmd用管理员方式打开。<br> <img src="/images/mysql/login.png" alt=""></p><ul><li>在mysql数据库user表中修改数据库密码。<pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">use</span> mysql  <span class="token comment" spellcheck="true">//打开数据库</span>mysql<span class="token operator">></span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string <span class="token operator">=</span> password <span class="token punctuation">(</span> <span class="token string">'123'</span> <span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'root'</span> <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//修改root密码为123</span>mysql<span class="token operator">></span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//刷新数据库</span></code></pre><img src="/images/mysql/pwd.png" alt=""></li></ul></li><li><p>回到my.ini配置文件删除刚才添加的语句。</p></li><li><p>使用新密码登陆MySQL。</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境安装JDK+Tomcat</title>
      <link href="/2019/10/23/linux/dev/"/>
      <url>/2019/10/23/linux/dev/</url>
      
        <content type="html"><![CDATA[<h3 id="软件版本："><a href="#软件版本：" class="headerlink" title="软件版本："></a>软件版本：</h3><ul><li>Centos 7.3</li><li>jdk8</li><li>tomcat8.5</li><li>所需软件百度网盘链接：<br>链接：<a href="https://pan.baidu.com/s/1uJVuRmZeK3DnGU8JSQH6uA" target="_blank" rel="noopener">https://pan.baidu.com/s/1uJVuRmZeK3DnGU8JSQH6uA</a> 提取码：gcgf </li></ul><h3 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h3><ol><li><p>利用FTP文件上传工具将所需软件包传输到Linux的/opt目录下。</p></li><li><p>解压jdk压缩包：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>tar -zxvf jdk-8u221-linux-x64.tar.gz</code></pre></li><li><p>在/etc/profile中配置环境变量：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>vim /etc/profile</code></pre><p> 在文档末尾添加配置：</p><blockquote><p>JAVA_HOME=/opt/jdk1.8.0_221</p></blockquote><blockquote><p>PATH=/opt/jdk1.8.0_221/bin:$PATH</p></blockquote><blockquote><p>export JAVA_HOME PATH</p></blockquote></li><li><p>需要注销用户配置才能生效：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>logout</code></pre></li><li><p>接下来解压tomcat,在/opt目录下输入：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>tar -zxvf apache-tomcat-8.5.46.tar.gz</code></pre></li><li><p>进入tomcat的bin目录，启动tomcat：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>cd apache-tomcat-8.5.46/bin <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>./startup.sh</code></pre></li><li><p>以上操作过后在linux本地浏览器8080端口可以访问tomcat，但外网无法访问，需要开启防火墙的8080端口：</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>8080/tcp --permanent <span class="token punctuation">[</span>root@curry opt<span class="token punctuation">]</span>systemctl restart firewalld</code></pre></li><li><p>配置成功，在其他系统下访问linux tomcat。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> JDK </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用阿里云服务器搭建个人网站</title>
      <link href="/2019/10/23/createsite/ecs%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/"/>
      <url>/2019/10/23/createsite/ecs%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h3><ul><li>远程登陆工具SecureCRT</li><li>文件传输工具Xftp</li><li>百度网盘链接：<br>链接：<a href="https://pan.baidu.com/s/10WNx25GQLMNtVQaZh5m1Eg" target="_blank" rel="noopener">https://pan.baidu.com/s/10WNx25GQLMNtVQaZh5m1Eg</a> 提取码：6pyc </li></ul><ol><li><p>购买云主机：</p><ul><li>如果年龄小于24岁，可以阿里云学生享受优惠活动。</li></ul><ol><li><p>注册阿里云账号，百度搜索“云翼计划”关键字，进入活动主页面，选择购买相应的服务器套餐。</p><p> <img src="/images/createsite/goumai.png" alt=""></p></li><li><p>购买成功之后来到”控制台”页面，在控制台主页的”已开通的云产品”项下找到服务器项点击。</p><p> <img src="/images/createsite/daohang.png" alt=""></p></li><li><p>进入服务器项之后能够看到自己已购买的服务器列表，点击进入。</p><p> <img src="/images/createsite/server-list.png" alt=""></p></li><li><p>在”服务器管理”主页面中点击”应用部署”项的”立即设置”按钮，进而设置服务器系统的root密码。</p><p> <img src="/images/createsite/set.png" alt=""><br> <img src="/images/createsite/setpw.png" alt=""></p></li><li><p>设置好root密码后，使用CRT远程连接工具登陆服务器。</p><p> <img src="/images/createsite/login.png" alt=""><br> <img src="/images/createsite/success.png" alt=""><br> 显示以上信息则登陆云主机成功。</p></li></ol></li><li><p>在服务器中安装jdk+tomcat:</p><p> 参考另一篇文章: <a href="/2019/10/23/linux/dev/">linux环境安装jdk-tomcat</a></p></li><li><p>购买域名并设置域名解析：</p><ul><li><p>选择并购买自己喜欢的域名后，在控制台中配置域名解析：</p><p><img src="/images/createsite/A.png" alt=""><br><img src="/images/createsite/AWWW.png" alt=""></p></li><li><p>配置成功后过一会域名就可以解析到自己的服务器，在tomcat，配置相应端口号就可以访问。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aliyun </tag>
            
            <tag> Linux </tag>
            
            <tag> JDK </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="/2019/10/05/docker/index/"/>
      <url>/2019/10/05/docker/index/</url>
      
        <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="/file/Docker.html">尚硅谷周阳</a></li></ul><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>Centos 6.8</p></blockquote><blockquote><p>Docker 1.7.1</p></blockquote><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote><p><code>目前，Docker官网上提供的docker是基于centos7系列安装方法。如果我们想在低于3.x内核的操作系统（比如Centos6.8）上装Docker最新版，势必要升级内核。但是想要在Centos6.7上安装可以安装较低版本的Docker。事实上，对于内核版本要大于3.10这个要求，是从Docker1.8.2版本开始的，Docker之前的版本是可以运行在较低内核版本之上的，比如1.7.1。</code></p></blockquote><blockquote><p><code>在Centos6.8的标准yum源中已经没有Docker的安装包了，这时，我们需要安装EPEL。EPEL（Extra Packages for Enterprise Linux），企业版Linux额外包，RHEL分布非标准包的社区类库。</code></p></blockquote><ol><li><p>Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y epel-release</span></code></pre></li><li><p>安装Docker</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install docker-io</span></code></pre></li><li><p>系统提示</p><blockquote><p>No package docker-io available.</p></blockquote></li><li><p>直接改用下载源安装</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm</span></code></pre></li><li><p>安装后的配置文件</p><blockquote><p>/etc/sysconfig/docker</p></blockquote></li><li><p>启动Docker后台服务</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># service docker start</span></code></pre><p> <img src="/images/Docker/start.png" alt=""></p></li><li><p>验证Docker安装是否成功</p><pre class=" language-bash"><code class="language-bash"> <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker version</span></code></pre><p> <img src="/images/Docker/version.png" alt=""></p></li></ol><p><em>Docker安装成功！！！</em></p><h3 id="Docker配置阿里云镜像加速"><a href="#Docker配置阿里云镜像加速" class="headerlink" title="Docker配置阿里云镜像加速"></a>Docker配置阿里云镜像加速</h3><ol><li><p>登陆阿里云平台，选择”容器镜像服务”。</p><p> <img src="/images/Docker/aliyun.png" alt=""></p></li><li><p>点击”管理控制台”，选择”镜像加速器”项，即可看到自己的加速器地址链接。</p><p> <img src="/images/Docker/jiasu.png" alt=""></p></li><li><p>在Docker本地配置文件”/etc/sysconfig/docker”中配置本机Docker镜像加速器。</p><p> <img src="/images/Docker/config.png" alt=""></p></li><li><p>重新启动Docker服务。</p><p> <img src="/images/Docker/restart.png" alt=""></p></li><li><p>验证加速器配置是否生效，出现–registry-mirror参数说明配置成功。</p><p> <img src="/images/Docker/yanzheng.png" alt=""></p></li></ol><h3 id="Docker搜索镜像出错"><a href="#Docker搜索镜像出错" class="headerlink" title="Docker搜索镜像出错"></a>Docker搜索镜像出错</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search tomcat</span>Error response from daemon: Get https://index.docker.io/v1/search?q<span class="token operator">=</span>tomcat: dial tcp 52.44.106.10:443: connection refused</code></pre><p>解决方法：</p><blockquote><p>修改/etc/sysconfig/docker</p></blockquote><blockquote><p><code>other_args=&quot;--registry-mirror=https://********.mirror.aliyuncs.com--exec-driver=lxc --selinux-enabled&quot;</code></p></blockquote><h3 id="Centos内核版本过低导致Docker无法运行"><a href="#Centos内核版本过低导致Docker无法运行" class="headerlink" title="Centos内核版本过低导致Docker无法运行"></a>Centos内核版本过低导致Docker无法运行</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it d97a52facc3f</span>FATAL: kernel too <span class="token punctuation">[</span>root@curry 桌面<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -a</span>Linux curry.abc 2.6.32-754.23.1.el6.x86_64 <span class="token comment" spellcheck="true">#1 SMP Thu Sep 26 12:05:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><p>原因：Docker要求的Centos内核版本至少为3.8.0，而我的系统内核是2.6.32，所以需要升级内核。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
